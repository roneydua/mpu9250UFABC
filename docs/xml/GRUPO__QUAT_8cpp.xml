<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="GRUPO__QUAT_8cpp" kind="file" language="C++">
    <compoundname>GRUPO_QUAT.cpp</compoundname>
    <includes refid="GRUPO__QUAT_8h" local="yes">GRUPO_QUAT.h</includes>
    <includes local="no">Arduino.h</includes>
    <incdepgraph>
      <node id="23">
        <label>lib/GRUPO_QUAT/GRUPO_QUAT.cpp</label>
        <link refid="GRUPO__QUAT_8cpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Eigen/Dense</label>
      </node>
      <node id="26">
        <label>Arduino.h</label>
      </node>
      <node id="24">
        <label>GRUPO_QUAT.h</label>
        <link refid="GRUPO__QUAT_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceekf">ekf</innernamespace>
    <briefdescription>
<para>Cabecalho com funcoes de quaternion. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Roney D da Silva </para></simplesect>
<simplesect kind="date"><para>7 Apr 2021 </para></simplesect>
<simplesect kind="copyright"><para>2021 Roney D da Silva Email: <ulink url="mailto:roneyddasilva@gmail.com">roneyddasilva@gmail.com</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="GRUPO__QUAT_8h" kindref="compound">GRUPO_QUAT.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceekf" kindref="compound">ekf</ref><sp/>{</highlight></codeline>
<codeline lineno="22" refid="namespaceekf_1af3f0a631343e55ec8b42f3fbea182461" refkind="member"><highlight class="normal">Eigen::Matrix3f<sp/><ref refid="namespaceekf_1af3f0a631343e55ec8b42f3fbea182461" kindref="member">skew</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>Eigen::Matrix3f<sp/>M<sp/>=<sp/>Eigen::Matrix3f::Zero();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>M<sp/>&lt;&lt;<sp/>0,<sp/>-v(2),<sp/>v(1),<sp/>v(2),<sp/>0,<sp/>-v(0),<sp/>-v(1),<sp/>v(0),<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35" refid="namespaceekf_1a9c00a936937eadb4b340f0f969afbdca" refkind="member"><highlight class="normal">Eigen::Matrix4f<sp/><ref refid="namespaceekf_1a9c00a936937eadb4b340f0f969afbdca" kindref="member">S_r</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>Eigen::Matrix4f<sp/>mS_r<sp/>=<sp/>Eigen::Matrix4f::Identity()<sp/>*<sp/>q(0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>mS_r.block&lt;1,<sp/>3&gt;(0,<sp/>1)<sp/>=<sp/>-q.segment&lt;3&gt;(1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>mS_r.block&lt;3,<sp/>1&gt;(1,<sp/>0)<sp/>=<sp/>q.segment&lt;3&gt;(1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>mS_r.block&lt;3,<sp/>3&gt;(1,<sp/>1)<sp/>-=<sp/><ref refid="namespaceekf_1af3f0a631343e55ec8b42f3fbea182461" kindref="member">skew</ref>(q.segment&lt;3&gt;(1));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mS_r;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48" refid="namespaceekf_1ac031eda654b199bd45807eed2acdb3ec" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceekf_1ac031eda654b199bd45807eed2acdb3ec" kindref="member">computeMcdFromQuaternion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;q,<sp/>Eigen::Matrix3f<sp/>&amp;mcd)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>mcd<sp/>=<sp/>Eigen::Matrix3f::Identity()<sp/>*<sp/>(2.0f<sp/>*<sp/>q(0)<sp/>*<sp/>q(0)<sp/>-<sp/>1.0f)<sp/>+</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f<sp/>*<sp/>(q.tail(3)<sp/>*<sp/>q.tail(3).transpose())<sp/>+</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f<sp/>*<sp/>q(0)<sp/>*<sp/><ref refid="namespaceekf_1af3f0a631343e55ec8b42f3fbea182461" kindref="member">skew</ref>(q.tail(3));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53" refid="namespaceekf_1ae9e1aaaa7793db099f4ef88b44aab8d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceekf_1ae9e1aaaa7793db099f4ef88b44aab8d5" kindref="member">printEigen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXf<sp/>&amp;<ref refid="namespacedrone_1a7475c0a87d5c8ae96bdc6cb6e9d54a29" kindref="member">m</ref>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>m.cols();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>m.rows();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>c;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,%f&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacedrone_1a7475c0a87d5c8ae96bdc6cb6e9d54a29" kindref="member">m</ref>(i,<sp/>j));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="namespaceekf_1a13baef64e88517a1c0af97c5bfb32787" refkind="member"><highlight class="normal">Eigen::Vector3f<sp/><ref refid="namespaceekf_1a13baef64e88517a1c0af97c5bfb32787" kindref="member">computeVectorProjection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f<sp/>&amp;v,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f<sp/>&amp;u)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>_norm<sp/>=<sp/>v.norm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>-<sp/>((v.dot(u))<sp/>/<sp/>(u.squaredNorm()))<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="namespaceekf_1aebcb4259d74954e6d5b117101bbec4ca" refkind="member"><highlight class="normal">Eigen::Vector4f<sp/><ref refid="namespaceekf_1aebcb4259d74954e6d5b117101bbec4ca" kindref="member">multiplyQuaternions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;p,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>Eigen::Vector4f<sp/>pq;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>pq(0)<sp/>=<sp/>p(0)<sp/>*<sp/>q(0)<sp/>-<sp/>p(1)<sp/>*<sp/>q(1)<sp/>-<sp/>p(2)<sp/>*<sp/>q(2)<sp/>-<sp/>p(3)<sp/>*<sp/>q(3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>pq(1)<sp/>=<sp/>p(0)<sp/>*<sp/>q(1)<sp/>+<sp/>p(1)<sp/>*<sp/>q(0)<sp/>+<sp/>p(2)<sp/>*<sp/>q(3)<sp/>-<sp/>p(3)<sp/>*<sp/>q(2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>pq(2)<sp/>=<sp/>p(0)<sp/>*<sp/>q(2)<sp/>-<sp/>p(1)<sp/>*<sp/>q(3)<sp/>+<sp/>p(2)<sp/>*<sp/>q(0)<sp/>+<sp/>p(3)<sp/>*<sp/>q(1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>pq(3)<sp/>=<sp/>p(0)<sp/>*<sp/>q(3)<sp/>+<sp/>p(1)<sp/>*<sp/>q(2)<sp/>-<sp/>p(2)<sp/>*<sp/>q(1)<sp/>+<sp/>p(3)<sp/>*<sp/>q(0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pq;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99" refid="namespaceekf_1a14dbdefbe7dbb78959772fc07e735806" refkind="member"><highlight class="normal">Eigen::Vector4f<sp/><ref refid="namespaceekf_1aebcb4259d74954e6d5b117101bbec4ca" kindref="member">multiplyQuaternions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;p,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>Eigen::Vector4f<sp/>pq;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>pq(0)<sp/>=<sp/>-p(1)<sp/>*<sp/>q(0)<sp/>-<sp/>p(2)<sp/>*<sp/>q(1)<sp/>-<sp/>p(3)<sp/>*<sp/>q(2);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>pq(1)<sp/>=<sp/>p(0)<sp/>*<sp/>q(0)<sp/>+<sp/>p(2)<sp/>*<sp/>q(2)<sp/>-<sp/>p(3)<sp/>*<sp/>q(1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>pq(2)<sp/>=<sp/>p(0)<sp/>*<sp/>q(1)<sp/>-<sp/>p(1)<sp/>*<sp/>q(2)<sp/>+<sp/>p(3)<sp/>*<sp/>q(0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>pq(3)<sp/>=<sp/>p(0)<sp/>*<sp/>q(2)<sp/>+<sp/>p(1)<sp/>*<sp/>q(1)<sp/>-<sp/>p(2)<sp/>*<sp/>q(0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pq;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="namespaceekf_1a7a798898cf7aa6db9b57d53dcf93d185" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceekf_1a7a798898cf7aa6db9b57d53dcf93d185" kindref="member">quaternion2Euler</ref>(Eigen::Vector3f<sp/>&amp;_euler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector4f<sp/>&amp;_q)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculo<sp/>de<sp/>fi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>_euler(0)<sp/>=<sp/>RAD_TO_DEG<sp/>*<sp/>atan2f((_q(0)<sp/>*<sp/>_q(1)<sp/>+<sp/>_q(2)<sp/>*<sp/>_q(3)),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f<sp/>-<sp/>(_q(1)<sp/>*<sp/>_q(1)<sp/>+<sp/>_q(2)<sp/>*<sp/>_q(2)));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculo<sp/>de<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>_euler(1)<sp/>=<sp/>RAD_TO_DEG<sp/>*<sp/>asinf(2.0f<sp/>*<sp/>(_q(0)<sp/>*<sp/>_q(1)<sp/>-<sp/>_q(0)<sp/>*<sp/>_q(3)));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculo<sp/>de<sp/>psi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>_euler(2)<sp/>=<sp/>RAD_TO_DEG<sp/>*<sp/>atan2f((_q(0)<sp/>*<sp/>_q(3)<sp/>+<sp/>_q(1)<sp/>*<sp/>_q(2)),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f<sp/>-<sp/>(_q(2)<sp/>*<sp/>_q(2)<sp/>+<sp/>_q(3)<sp/>*<sp/>_q(3)));</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ekf</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/GRUPO_QUAT/GRUPO_QUAT.cpp"/>
  </compounddef>
</doxygen>
